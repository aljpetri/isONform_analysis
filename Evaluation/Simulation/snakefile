#Runnable the script by using the following: snakemake --cores 1 --configfile configs.json
import re
import os
import errno
import shutil
import glob
#The following variables represent the paths to the files required to run this pipeline

###File_location: Gives the location of the files that we want to analyse:
#file_location="/home/alexanderpetri/isONform_analysis/100kSIRV/0againer/"
file_location=config["IN_SEQUENCE"]

###Script_input_folder: Equal to the folder the snakefile is located in. Should also contain all scripts needed for our analysis:
#script_input_folder="/home/alexanderpetri/isONform_analysis/Evaluation/Evaluate_SIRV/"
#script_input_folder=config["SCRIPT_FOLDER"]

### Output_folder: The folder in which all intermediate datasets as well as all real outputs are stored:

isoform_location=config["SEQ_DIR"]+"isoforms/"
outfolder = config["SEQ_DIR"]
###ref_folder: Path to the reference which we use to analyse the data
#ref_folder="/home/alexanderpetri/Desktop/RAWDATA_PhD1/100kSIRVSubsampling/"
#ref_folder=config["REFERENCE_FOLDER"]
sequence_dir = config["SEQ_DIR"]
script_folder=config["SCRIPT_FOLDER"]
max_iso_nr=config["MAX_ISO_NR"]
n_runs=config["RUNS"]
#minimap_out_folder=config["MINIMAP_OUT_FOLDER"]
RUN_ID=[str(x) for x in range(1,config["RUNS"] + 1)]
NR_ISOFORMS = [str(x) for x in range(2,config["MAX_ISO_NR"] + 1)]
rattle_dir=config["RATTLE_DIR"]
isExist = os.path.exists(outfolder)
if not isExist:
    # Create a new directory because it does not exist
    os.makedirs(outfolder)
        
rule all:
#input: #expand(outfolder+'/isONcorrform/alignments/alignment_{nr_isoforms}_{run_id}.sam', nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
	#input: expand(outfolder+'/counts/counts_{nr_isoforms}_{run_id}.csv', nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
	#input: expand(outfolder + "/isONcorrform/cl_map_{nr_isoforms}_{run_id}.txt", nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
	#input: rules.gen_sim_data.output.flag
	#input: expand(outfolder+"/isONcorrform/cl_result_{nr_isoforms}_{run_id}.fasta",nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
	#input: expand(outfolder+"/alignments/results_{nr_isoforms}_{run_id}.csv",nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
	#input: expand(outfolder+"/Rattle/rattle_res_{nr_isoforms}_{run_id}.fastq",nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
	input: expand(outfolder+"/alignments/results_rattle_{nr_isoforms}_{run_id}.csv",nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID),expand(outfolder+"/alignments/results_ison_{nr_isoforms}_{run_id}.csv",nr_isoforms=NR_ISOFORMS,run_id=RUN_ID), outfolder+"/graphs/Precision.png"
	
	
rule gen_sim_data:
    input: file_location+'ERR3588903_1.fastq',
    output: flag=expand(sequence_dir+'/reads/reads_{nr_isoforms}_{run_id}.fastq',nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID), otherflag=expand(outfolder+'/isoforms/isoforms_{nr_isoforms}_{run_id}.fa',nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
    shell: './Generate_sim_reads.sh {max_iso_nr} {n_runs} {input} {outfolder}'
	
rule run_isonform:
    input: rules.gen_sim_data.output.flag
    output: flag2=expand(outfolder+"/isONcorrform/cl_spoa_{nr_isoforms}_{run_id}.fastq",nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
    shell: './RunIsoncorrectIsonform.sh 15 20 {file_location}ERR3588903_1.fastq {sequence_dir} {script_folder}'
    
rule run_rattle:
	input: rules.gen_sim_data.output.flag #outfolder+"/isONcorrform/cl_spoa_{nr_isoforms}_{run_id}.fastq"
	output: flag3=expand(outfolder+"/Rattle/rattle_res_{nr_isoforms}_{run_id}.fastq",nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
	shell:"./RunRattle.sh 15 20 {file_location}ERR3588903_1.fastq {sequence_dir} {rattle_dir}"
rule convert_results:
	input: rules.run_isonform.output.flag2 #outfolder+"/isONcorrform/cl_spoa_{nr_isoforms}_{run_id}.fastq"
	output: flag4=outfolder+"/isONcorrform/cl_result_{nr_isoforms}_{run_id}.fasta"
	shell:	"sed -n '1~4s/^@/>/p;2~4p' {input} > {output}"
	
rule convert_rattle_results:
	input: rules.run_rattle.output.flag3 #outfolder+"/Rattle/rattle_res_{nr_isoforms}_{run_id}.fastq"
	output: flag4=outfolder+"/Rattle/rattle_res_{nr_isoforms}_{run_id}.fasta"
	shell:	"sed -n '1~4s/^@/>/p;2~4p' {input} > {output}"
	
rule align_for_best_match:
	input: ref=outfolder+'/isoforms/isoforms_{nr_isoforms}_{run_id}.fa',corr=outfolder+"/isONcorrform/cl_result_{nr_isoforms}_{run_id}.fasta"
	output: ison_flag= outfolder+"/alignments/results_ison_{nr_isoforms}_{run_id}.csv"
	shell:"python evaluate_simulated_reads.py {input.corr} {input.ref} {output}"
	
rule align_rattle_for_best_match:
	input: ref=outfolder+'/isoforms/isoforms_{nr_isoforms}_{run_id}.fa', corr=outfolder+"/Rattle/rattle_res_{nr_isoforms}_{run_id}.fasta" #outfolder+"/Rattle/rattle_res_{nr_isoforms}_{run_id}.fasta",ref=outfolder+'/isoforms/isoforms_{nr_isoforms}_{run_id}.fa'
	output: rattle_flag=outfolder+"/alignments/results_rattle_{nr_isoforms}_{run_id}.csv"
	shell:"python evaluate_simulated_reads.py {input.corr} {input.ref} {output}"
	
rule plot_results: 
	input: expand(outfolder+"/alignments/results_ison_{nr_isoforms}_{run_id}.csv",nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID), expand(outfolder+"/alignments/results_rattle_{nr_isoforms}_{run_id}.csv",nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID)
	output: outfolder+"/graphs/Precision.png"
	shell:" python Plotresults.py --indir {outfolder}/alignments/ --outfolder {outfolder}/graphs"
