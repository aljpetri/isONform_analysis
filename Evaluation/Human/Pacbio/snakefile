#Run via submit_main_snakemake.sh
#this snakemake pipeline is used to analyse the performance of isONform on Drosophila Data


#The following variables represent the paths to the files required to run this pipeline

###Script_input_folder: Equal to the folder the snakefile is located in. Should also contain all scripts needed for our analysis:
script_input_folder=config["SCRIPT_FOLDER"]

outfolder_root=config["ROOT_OUT"]
isonform_location=config["ISONFORM_LOCATION"]
isoform_abundance=config["ISO_ABUNDANCE"]
rattle_location=config["RATTLE_DIR"]
shell.prefix("set -o pipefail; ")
wildcard_constraints:
    nr_reads="[\d]+",
####################################################
########## standard python functions ###############
####################################################

import re
import os
import errno
import shutil
import glob

def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

rule all:
	input:outfolder_root+"/data/split_accs.fq",outfolder_root+'/data/full_length_output.fastq'  ,outfolder_root+"/stringtie/drosophila_aligned.sam",outfolder_root+"/stringtie/drosophila_aligned.sorted.bam",outfolder_root+"/stringtie/stringtie_res.gtf",outfolder_root+"/stringtie/stringtie_transcripts.fasta",outfolder_root + "/results/stringtie.sam",outfolder_root+"/rattle/transcriptome.fq"#,outfolder_root+'/isONform/outfolder/transcriptome.fq'


###############################################################################################################################
#                                                PREPROCESSING                                                                #
###############################################################################################################################

##Preprocessing:some of our tools have issues with the accessions- we shorten them here
rule split_accessions_orig:
    input: fastq = config["READS"]
    output: original_reads_split_accessions =  outfolder_root + "/data/split_accs.fq"

    run:
        shell("python split_accessions.py {input} {output.original_reads_split_accessions}")

##Use pychopper so every tool has the same possibility to perform its analysis on a clean dataset
#rule pychop:
#	input: outfolder_root + "/data/split_accs.fq"
#	output: outfolder_root+'/data/full_length_output.fastq'
#	shell: 'pychopper {input} {output}'

###############################################################################################################################
#                                                STRINGTIE PIPELINE                                                           #
###############################################################################################################################


##Align the original reads to the reference via minimap2 (part of the stringtie pipeline)
rule align_original_reads_minimap2:
    input: original_reads = outfolder_root + "/data/split_accs.fq" #outfolder_root+'/data/full_length_output.fastq'
    output: original_reads_aligned =  outfolder_root+"/stringtie/aligned.sam"
    run:
            ref = config["REFERENCE"]
            original_reads=config["READS"]
            shell("minimap2 --eqx -t 20 -ax splice -uf -k 13 -w 4 {ref} {original_reads} >  {output.original_reads_aligned} ")

##Sort the alignment(StringtiePipe)
rule sort_alignment:
	input: outfolder_root+"/stringtie/aligned.sam"
	output: outfolder_root+"/stringtie/aligned.sorted.bam"
	shell: "samtools view -Su {input} | samtools sort -o {output}"

##Index the alignment(StringtiePipe)
rule index_alignment:
	input: outfolder_root+"/stringtie/aligned.sorted.bam"
	output: outfolder_root+"/stringtie/aligned.sorted.bam.bai"
	shell: "samtools index {input}"

##Run stringtie (stringtie pipe)
rule run_stringtie:
	input: ref=outfolder_root+"/stringtie/aligned.sorted.bam",idx=outfolder_root+"/stringtie/aligned.sorted.bam.bai"
	output: outfolder_root+"/stringtie/stringtie_res.gtf"
	shell: "stringtie -p 20 -L -c 3 -s 3 -o {output} {input.ref}"

##Run gffread to get a fasta file from the stringtie output (stringtie pipe)
rule run_gffread:
	input: outfolder_root+"/stringtie/stringtie_res.gtf"
	output: outfolder_root+"/stringtie/stringtie_transcripts.fasta"
	run:
		ref = config["REFERENCE"]
		shell("gffread -w {output} -g {ref}  {input}")

##Align the Stringtie consensus vs the reference (needed for evaluations)
rule ultra_mm2_prep_st:
    input:
    output: ref_index = outfolder_root + "/uLTRA_st/all_splice_sites_annotatio$

    run:
        outfolder = outfolder_root + "/uLTRA_st"
        mkdir_p(outfolder)
        ref =  config["REFERENCE"]
        annotation = config["ANNOTATION"]
        timer=outfolder_root +"/time_usage_st.txt"
        shell("/usr/bin/time -v uLTRA index --disable_infer {ref} {annotation}$

rule ultra_mm2_align_st:
    input:  reads = outfolder_root+"/stringtie/stringtie_transcripts.fasta",
            ultra_index = outfolder_root + "/uLTRA_st/all_splice_sites_annotat$

    output: sam = outfolder_root + "/uLTRA_st/reads.sam",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/aligning_time_$
    run:
        ref =  config["REFERENCE"]
        outfolder = outfolder_root + "/uLTRA_st"
        shell("/usr/bin/time -v uLTRA align {ref} {input.reads}  {outfolder} -$


###############################################################################################################################
#                                                    RATTLE ANALYSIS                                                          #
###############################################################################################################################

##Cluster the reads (RATTLE pipe)
rule rattle_cluster:
        input:
                 outfolder_root + "/data/split_accs.fq"#outfolder_root+'/data/subsample.fastq'
        output:
                outfolder_root+"/rattle/clusters.out"
        run:
        	rattle_out_folder=outfolder_root+"/rattle/"
           	shell("{rattle_location}rattle cluster -i {input} -t 20 -o {rattle_out_folder} ")

##Correct the reads (RATTLE pipe)
rule rattle_correct:
        input:
                clusters= outfolder_root+"/rattle/clusters.out", fastq=outfolder_root+'/data/full_length_output.fastq'
        output:
                outfolder_root+"/rattle/corrected.fq",
                outfolder_root+"/rattle/uncorrected.fq",
                outfolder_root+"/rattle/consensi.fq"

        run:
        	rattle_out_folder=outfolder_root+"/rattle/"
             	shell("{rattle_location}/rattle correct -i {input.fastq} -c {input.clusters} -o {rattle_out_folder} -t 20  ")

##Polish the reads (RATTLE pipe)
rule rattle_polish:
        input:
                outfolder_root+"/rattle/consensi.fq"
        output:
                outfolder_root+"/rattle/transcriptome.fq"
        run:
        	rattle_out_folder=outfolder_root+"/rattle/"
             	shell("{rattle_location}/rattle polish -i {input} -o {rattle_out_folder} -t 20 ")

rule ultra_mm2_prep_Rattle:
    input:
    output: ref_index = outfolder_root + "/uLTRA_rattle/all_splice_sites_annota$

    run:
        outfolder = outfolder_root + "/uLTRA_rattle"
        mkdir_p(outfolder)
        ref =  config["REFERENCE"]
        annotation = config["ANNOTATION"]
        timer=outfolder_root +"/time_usage.txt"
        shell("/usr/bin/time -v uLTRA index --disable_infer {ref} {annotation} $




##Align the RATTLE consensus vs the reference (via uLTRA)
rule ultra_mm2_align_RATTLE:
    input:  reads = outfolder_root+"/rattle/transcriptome.fq",
            ultra_index = outfolder_root + "/uLTRA_rattle/all_splice_sites_anno$

    output: sam = outfolder_root + "/uLTRA_rattle/reads.sam",
            time_and_mem =  config["ROOT_OUT"] + "/time_and_mem/aligning_time_a$
    run:
        ref =  config["REFERENCE"]
        outfolder = outfolder_root + "/uLTRA_rattle"
        shell("/usr/bin/time -v uLTRA align {ref} {input.reads}  {outfolder} --$


##Evaluate the RATTLE results
rule evaluate_rattle:
    input: original_reads = outfolder_root+"/stringtie/stringtie_transcripts.fasta",
            corrected_reads = outfolder_root+"/rattle/transcriptome.fq",
            original_reads_aligned = outfolder_root + "/uLTRA_st/reads.sam",
            corrected_reads_aligned =  outfolder_root + "/uLTRA_rattle/reads.sa$
            gtf_annotation = config["ANNOTATION"] # drosophila v97 gtf annotation
    output: csv_file =  config["ROOT_OUT"] + "/evaluation_biological/RATTLE/{nr_reads}/results_per_read.csv"
    run:
        ref = config["REFERENCE"]
        outfolder = config["ROOT_OUT"] + "/evaluation_biological/RATTLE/{0}/".format(wildcards.nr_reads)
        mkdir_p(outfolder)
        shell("/usr/bin/time -v python evaluate_real_reads_to_genome.py  {input.original_reads_aligned}  {input.corrected_reads_aligned} {input.original_reads}  \
                                                        {input.corrected_reads} {ref} {input.gtf_annotation} {outfolder}")


###############################################################################################################################
#                                                     ISONFORM ANALYSIS                                                       #
###############################################################################################################################


##Run the isONpipeline
rule run_isONpipeline:
	input: fastq = outfolder_root + "/data/split_accs.fq"
	output: reads=outfolder_root+'/isONform/outfolder/transcriptome.fq', map=outfolder_root+'/isONform/transcriptome_mapping.txt'
	run:
	    output_dir=outfolder_root+'/isONform/outfolder'
	    shell('/usr/bin/time -v ./full_pipeline.sh {input.fastq} {output_dir} 20 {isonform_location} {isoform_abundance} pacbio')

##Align the isONform consensus vs the reference  (isONform evaluation)
rule ultra_mm2_prep_isON:
    input:
    output: ref_index = outfolder_root + "/uLTRA_ison/all_splice_sites_annotati$

    run:
        outfolder = outfolder_root + "/uLTRA_ison"
        mkdir_p(outfolder)
        ref =  config["REFERENCE"]
        annotation = config["ANNOTATION"]
        timer=outfolder_root +"/time_usage.txt"
        shell("/usr/bin/time -v uLTRA index --disable_infer {ref} {annotation} $


rule ultra_mm2_align_isON:
    input:  reads = outfolder_root+'/isONform/outfolder/isoforms/transcriptome.$
            ultra_index = outfolder_root + "/uLTRA_ison/all_splice_sites_annota$

    output: sam = outfolder_root + "/uLTRA_ison/reads.sam",
    run:
        ref =  config["REFERENCE"]
        outfolder = outfolder_root + "/uLTRA_ison"
        runtime=outfolder_root+"/timeusage.txt"
        othertime=outfolder_root+"/other_timeusage.txt"

        shell("/usr/bin/time -v uLTRA align {ref} {input.reads}  {outfolder} --$



##Evaluate the isONform results
rule evaluate_isONform:
    input: original_reads = outfolder_root+"/stringtie/stringtie_transcripts.fasta",
            corrected_reads = outfolder_root+'/isONform/outfolder/transcriptome.fq',
            original_reads_aligned = outfolder_root + "/uLTRA_st/reads.sam",
            corrected_reads_aligned =  outfolder_root + "/uLTRA_ison/reads.sam",
            gtf_annotation = config["ANNOTATION"] # drosophila v97 gtf annotation
    output: csv_file =  config["ROOT_OUT"] + "/evaluation_biological/isONform/{nr_reads}/results_per_read.csv"
    run:
        ref = config["REFERENCE"]
        outfolder = config["ROOT_OUT"] + "/evaluation_biological/isONform/{0}/".format(wildcards.nr_reads)
        mkdir_p(outfolder)
        shell("/usr/bin/time -v python evaluate_real_reads_to_genome.py  {input.original_reads_aligned}  {input.corrected_reads_aligned} {input.original_reads}  \
                                                        {input.corrected_reads} {ref} {input.gtf_annotation} {outfolder}")

