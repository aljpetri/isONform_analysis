#Runnable the script by using the following: snakemake --cores 1 --configfile configs.json
import re
import os
import errno
import shutil
import glob


def mkdir_p(path):
    print("creating", path)
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise
#This script is used to generate a plot indicating the precision and recall comparing rattle and the isONpipeline.
#
#The following variables represent the paths to the files required to run this pipeline

###File_location: Gives the location of the files that we want to analyse:
#file_location="/home/alexanderpetri/isONform_analysis/100kSIRV/0againer/"
file_location=config["IN_SEQUENCE"]

###Script_folder: Equal to the folder the snakefile is located in. Should also contain all scripts needed for our analysis:
script_folder=config["SCRIPT_FOLDER"]

### Output_folder: The folder in which all intermediate datasets as well as all real outputs are stored:

#isoform_location=config["SEQ_DIR"]+"isoforms/"
outfolder = config["ROOT_OUT"]
###ref_folder: Path to the reference which we use to analyse the data
#ref_folder=config["REFERENCE_FOLDER"]
#sequence_dir = config["SEQ_DIR"]

max_iso_nr=config["MAX_ISO_NR"]
n_runs=config["RUNS"]
RUN_ID=[str(x) for x in range(1,config["RUNS"] + 1)]
NR_ISOFORMS = [str(x) for x in [50]]
ABUNDANCES=[str(x) for x in [1,2,3,5,10,15,20,25,50]]
#NR_ISOFORMS= [str(x) for x in range(2,15)]
rattle_dir=config["RATTLE_DIR"]
ref_folder=config["REFERENCE_FOLDER"]
outfolder_root=config["ROOT_OUT"]
isExist = os.path.exists(outfolder)
if not isExist:
    # Create a new directory because it does not exist
    os.makedirs(outfolder) 
          
rule all:
    input: expand(outfolder_root+ "evaluation_biological/{abundance}_r.csv",abundance=ABUNDANCES),expand(outfolder_root +"ultra_rattle_results/reads_{abundance}.sam",abundance=ABUNDANCES),expand(outfolder_root+ "evaluation_biological/{abundance}_i.csv",abundance=ABUNDANCES),expand(outfolder_root+"parse_out/{abundance}_FSM.pdf",abundance=ABUNDANCES)

rule filter_isonform:
    input: expand(outfolder+"/isON_transcriptome.fastq")
    output: expand(outfolder+"/filtered/transcriptome_{abundance}.fastq",abundance=ABUNDANCES)
    run:
        outdir=outfolder+"/filtered/"
        indir=outfolder
        shell(" python filter_by_support.py --indir {indir} --outfolder {outdir}")
rule filter_rattle:
    input: expand(outfolder+"RATTLE_transcriptome.fastq")
    output: expand(outfolder+"RATTLE_filtered/transcriptome_{abundance}.fastq",abundance=ABUNDANCES)
    run:
        indir=outfolder
        outdir=outfolder+"RATTLE_filtered/"
        shell(" python filter_RATTLE_by_support.py --indir {indir} --outfolder {outdir}")
#rule ultra_full_rattle:
 #   input:  outfolder_root+"/RATTLE_filtered/transcriptome_{abundance}.fastq"
#    output: outfolder_root +"ultra_rattle_results/reads_{abundance}.sam",
#    run:
#        this_outfile=outfolder_root + "ultra_rattle/reads.sam"
#        this_outfolder=outfolder_root + "ultra_rattle"#,abundance=ABUNDANCES
#        genome_fa=ref_folder+"Drosophila_melanogaster.BDGP6.22.dna.toplevel.fa"
#        annotation=ref_folder+"Drosophila_melanogaster.BDGP6.32.104.gtf"
#        shell("uLTRA pipeline {genome_fa} {annotation} {input} {this_outfolder}  --min_mem 17 --mask_threshold 200 --min_acc 0.6 --t 19")
#rule ultra_full_isON:
#    input:  outfolder_root+"filtered/transcriptome_{abundance}.fastq"
#    output: outfolder_root +"ultra_ison_results/reads_{abundance}.sam",
#    run:
#            this_outfile=outfolder_root + "ultra_ison/reads.sam"
#            this_outfolder=outfolder_root + "ultra_ison"
#            remov=this_outfolder+"/*"#,abundance=ABUNDANCES
#            #shell("echo {remov}")
#            genome_fa=ref_folder+"Drosophila_melanogaster.BDGP6.22.dna.toplevel.fa"
#            annotation=ref_folder+"Drosophila_melanogaster.BDGP6.32.104.gtf"
#            shell("uLTRA pipeline {genome_fa} {annotation} {input} {this_outfolder}  --min_mem 17 --mask_threshold 200 --min_acc 0.6 --t 19 --disable_infer ")
#            shell("mv {this_outfile} {output}")
#            #shell("rm outfolder_root + "ultra_ison/*")
rule ultra_mm2_prep:
    input:
    output: ref_index = outfolder_root + "uLTRA_prepped/all_splice_sites_annotations.pickle"

    run:
        outfolder = outfolder_root + "uLTRA_prepped"
        mkdir_p(outfolder)
        ref=ref_folder+"Drosophila_melanogaster.BDGP6.22.dna.toplevel.fa"
        annotation=ref_folder+"Drosophila_melanogaster.BDGP6.32.104.gtf"
        timer=outfolder_root +"/time_usage.txt"
        shell("/usr/bin/time -v uLTRA index --disable_infer {ref} {annotation} {outfolder} --min_mem 17 --mask_threshold 200 ")


rule ultra_mm2_align_isON:
    input:  reads = outfolder_root+"filtered/transcriptome_{abundance}.fastq",
            ultra_index = outfolder_root + "uLTRA_prepped/all_splice_sites_annotations.pickle"

    output: sam = outfolder_root +"ultra_ison_results/reads_{abundance}.sam",
    run:
        ref =  ref_folder+"Drosophila_melanogaster.BDGP6.22.dna.toplevel.fa"
        all_files_prepped=outfolder_root + "uLTRA_prepped"
        outfolder = outfolder_root +"uLTRA_ison"
        this_outfile=outfolder_root +"uLTRA_ison/reads.sam"
        #mkdir_p(outfolder)
	    #runtime=outfolder_root+"/timeusage.txt"
        #othertime=outfolder_root+"/other_timeusage.txt"
        #cp all_files_prepped
        shell("cp -r {all_files_prepped} {outfolder}")
        shell("/usr/bin/time -v uLTRA align {ref} {input.reads}  {outfolder} --min_mem 17 --min_acc 0.6 --t 6 ") # 2> {runtime})
        shell("mv {this_outfile} {output}")
        shell("rm -r {outfolder}")

rule ultra_mm2_align_rattle:
    input:  reads = outfolder_root+"RATTLE_filtered/transcriptome_{abundance}.fastq",
            ultra_index = outfolder_root + "uLTRA_prepped/all_splice_sites_annotations.pickle"

    output: sam = outfolder_root +"ultra_rattle_results/reads_{abundance}.sam",
    run:
        ref =  ref_folder+"Drosophila_melanogaster.BDGP6.22.dna.toplevel.fa"
        all_files_prepped=outfolder_root + "uLTRA_prepped"
        outfolder = outfolder_root +"uLTRA_rattle"
        this_outfile=outfolder_root +"uLTRA_rattle/reads.sam"
        #mkdir_p(outfolder)
	    #runtime=outfolder_root+"/timeusage.txt"
        #othertime=outfolder_root+"/other_timeusage.txt"
        #cp all_files_prepped
        shell("cp -r {all_files_prepped} {outfolder}")
        shell("/usr/bin/time -v uLTRA align {ref} {input.reads}  {outfolder} --min_mem 17 --min_acc 0.6 --t 6 ") # 2> {runtime})
        shell("mv {this_outfile} {output}")
        shell("rm -r {outfolder}")
##Evaluate the isONform results
rule evaluate_isONform:
    input: original_reads = outfolder_root+"stringtie_transcripts.fasta",
            corrected_reads = outfolder_root+"filtered/transcriptome_{abundance}.fastq",
            original_reads_aligned = outfolder_root + "st_alignment.sam",
            corrected_reads_aligned =  outfolder_root +"ultra_ison_results/reads_{abundance}.sam",
            gtf_annotation = ref_folder+"Drosophila_melanogaster.BDGP6.32.104.gtf" # drosophila v97 gtf annotation
    output: csv_file =  outfolder_root+ "evaluation_biological/{abundance}_i.csv",other_csv=outfolder_root+ "evaluation_biological/results_per_read_{abundance}_i.csv"
    run:
        #id="{abundance}.csv"
        #outfile=outfolder_root+"evaluation_biological/isONform/{abundance}.csv"
        #otherout=outfolder_root+"evaluation_biological/isONform/results.csv"
        #otherout_cp=outfolder_root+"evaluation_biological/res_{abundance}.csv"
        ref =  ref_folder+"Drosophila_melanogaster.BDGP6.22.dna.toplevel.fa"
#        #eval_dir = config["ROOT_IN"] + "/scripts/"
        outfolder =  outfolder_root+"evaluation_biological/isONform/"
        mkdir_p(outfolder)
        shell("/usr/bin/time -v python evaluate_real_reads_to_genome.py  {input.original_reads_aligned}  {input.corrected_reads_aligned} {input.original_reads}  \
                                                        {input.corrected_reads} {ref} {input.gtf_annotation} {outfolder}  --tool isONform")
        shell("rm -r {outfolder}")
"""
rule evaluate_rattle:
    input:  original_reads = outfolder_root+"stringtie_transcripts.fasta",
            corrected_reads = outfolder_root+"RATTLE_filtered/transcriptome_{abundance}.fastq",
            original_reads_aligned = outfolder_root + "st_alignment.sam",
            corrected_reads_aligned =  outfolder_root +"ultra_rattle_results/reads_{abundance}.sam",
            gtf_annotation = ref_folder+"Drosophila_melanogaster.BDGP6.32.104.gtf" # drosophila v97 gtf annotation
    output: csv_file =  outfolder_root+ "evaluation_biological/{abundance}_r.csv",other_csv=outfolder_root+ "evaluation_biological/results_per_read_{abundance}_r.csv"
    run:
        #id="{abundance}.csv"
        #outfile=outfolder_root+"evaluation_biological/isONform/{abundance}.csv"
        #otherout=outfolder_root+"evaluation_biological/isONform/results.csv"
        #otherout_cp=outfolder_root+"evaluation_biological/res_{abundance}.csv"
        ref =  ref_folder+"Drosophila_melanogaster.BDGP6.22.dna.toplevel.fa"
#        #eval_dir = config["ROOT_IN"] + "/scripts/"
        outfolder =  outfolder_root+"evaluation_biological/RATTLE/"
        mkdir_p(outfolder)
        shell("/usr/bin/time -v python evaluate_real_reads_to_genome.py  {input.original_reads_aligned}  {input.corrected_reads_aligned} {input.original_reads} {input.corrected_reads} {ref} {input.gtf_annotation} {outfolder}  --tool RATTLE")
        shell("rm -r {outfolder}")"""
rule evaluate_further_isON:
    input: rat=outfolder_root+ "evaluation_biological/results_per_read_{abundance}_r.csv",ison=outfolder_root+ "evaluation_biological/results_per_read_{abundance}_i.csv"
    output: outfolder_root+"parse/{abundance}.txt"
    run:
        outfolder=outfolder_root+"parse/"
        shell("python parse_results_per_read.py {input.ison} {input.rat} {outfolder}")


#align the results to the input file better to align vs transcriptome?
#rule align_for_best_match:
	#input: ref=sequence_dir+"/references/reference_{nr_isoforms}_{run_id}.fasta",corr=outfolder+"/isONcorrform/cl_result_{nr_isoforms}_{run_id}.fasta"
#	input:corr=outfolder+"/filtered/transcriptome_{nr_isoforms}_{run_id}_{abundance}.fastq",ref=sequence_dir+"/references/reference_{nr_isoforms}_{run_id}.fasta",#ref=ref_folder+'SIRVTranscriptome.fasta' #
#	output: ison_flag= outfolder+"/alignments/results_ison_{nr_isoforms}_{run_id}_{abundance}.csv"#, notneeded=outfolder+"/alignments/error_ison_{nr_isoforms}_{run_id}.csv"
#	shell:"python evaluate_sim_reads.py {input.corr} {input.ref} {output.ison_flag}"
	
#rule align_rattle_for_best_match:
#	input:  corr=outfolder+"/RATTLE_filtered/transcriptome_{nr_isoforms}_{run_id}_{abundance}.fastq", ref=sequence_dir+"/references/reference_{nr_isoforms}_{run_id}.fasta"#outfolder+"/Rattle/rattle_res_{nr_isoforms}_{run_id}.fasta",ref=outfolder+'/isoforms/isoforms_{nr_isoforms}_{run_id}.fa',ref=ref_folder+'SIRVTranscriptome.fasta'#,
#	output: needed=outfolder+"/alignments/results_rattle_{nr_isoforms}_{run_id}_{abundance}.csv"#, notneeded=outfolder+"/alignments/error_rattle_{nr_isoforms}_{run_id}.csv"
#	shell:"python evaluate_sim_reads.py {input.corr} {input.ref} {output.needed}"
	
#rule plot_results:
#	input: expand(outfolder+"/alignments/results_ison_{nr_isoforms}_{run_id}_{abundance}.csv",nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID,abundance=ABUNDANCES), expand(outfolder+"/alignments/results_rattle_{nr_isoforms}_{run_id}_{abundance}.csv",nr_isoforms=NR_ISOFORMS ,run_id=RUN_ID,abundance=ABUNDANCES)
#	output: outfolder+"/graphs/precision_SIRV_var_abundance.pdf"
#	run:
#	    max_isos=config["MAX_ISO_NR"]
#	    shell(" python Plotresults.py --indir {outfolder}/alignments/ --outfolder {outfolder}/graphs --max_isoforms {max_isos}")
#	    shell(" python PlotErrorRates.py --indir {outfolder}/alignments/ --outfolder {outfolder}/graphs --max_isoforms {max_isos}")

